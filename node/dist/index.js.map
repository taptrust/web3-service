{"version":3,"sources":["../src/index.js"],"names":["require","config","express","bodyParser","account","relay","app","use","json","type","all","req","res","next","publicKey","query","username","createAccount","then","user","contractAddress","contract_address","catch","post","body","signature","action","params","relaySendTransactionMessage","result","getUsers","users","status","set","send","join","end","getUserNonce","address","nonce","console","log","get","port","process","env","PORT","listen"],"mappings":";;AAAA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,aAAaH,QAAQ,aAAR,CAAnB;AACA,IAAMI,UAAUJ,QAAQ,WAAR,CAAhB;;AAEA,IAAMK,QAAQL,QAAQ,SAAR,CAAd;AACA,IAAMM,MAAMJ,SAAZ;;AAGAI,IAAIC,GAAJ,CAAQJ,WAAWK,IAAX,CAAgB,EAAEC,MAAM,kBAAR,EAAhB,CAAR;;AAGAH,IAAII,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIC,YAAYH,IAAII,KAAJ,CAAUD,SAA1B;AACA,MAAIE,WAAWL,IAAII,KAAJ,CAAUC,QAAzB;AACAZ,UAAQa,aAAR,CAAsBD,QAAtB,EAAgCF,SAAhC,EACGI,IADH,CACQ,UAACC,IAAD,EAAU;AACdP,QAAIJ,IAAJ,CAAS,EAACY,iBAAiBD,KAAKE,gBAAvB,EAAT;AACD,GAHH,EAIGC,KAJH,CAIST,IAJT;AAKD,CARD;;AAUAP,IAAIiB,IAAJ,CAAS,eAAT,EAA0B,UAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIG,WAAWL,IAAIa,IAAJ,CAASR,QAAxB;AACA,MAAIS,YAAYd,IAAIa,IAAJ,CAASC,SAAzB;AACA,MAAIL,kBAAkBT,IAAIa,IAAJ,CAASJ,eAA/B;AACA,MAAIM,SAASf,IAAIa,IAAJ,CAASE,MAAtB;AACA,MAAIC,SAAShB,IAAIa,IAAJ,CAASG,MAAtB;;AAEA,UAAQD,MAAR;AACE,SAAK,iBAAL;AACErB,YAAMuB,2BAAN,CAAkCZ,QAAlC,EAA4CS,SAA5C,EAAuDL,eAAvD,EAAwEM,MAAxE,EAAgFC,MAAhF,EACGT,IADH,CACQ,UAACW,MAAD,EAAY;AAChBjB,YAAIJ,IAAJ,CAAS,EAACqB,QAAQA,MAAT,EAAT;AACD,OAHH;AAIA;AACF;AACEjB,UAAIJ,IAAJ,CAAS,EAAC,SAAS,4BAA4BkB,MAAtC,EAAT;AACA;AATJ;AAYD,CAnBD;;AAqBApB,IAAII,GAAJ,CAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvCT,UAAQ0B,QAAR,GACGZ,IADH,CACQ,UAACa,KAAD,EAAW;AACfnB,QACGoB,MADH,CACU,GADV,EAEGC,GAFH,CAEO,cAFP,EAEuB,YAFvB,EAGGC,IAHH,sBAG2BH,MAAMI,IAAN,CAAW,IAAX,CAH3B,EAIGC,GAJH;AAKD,GAPH,EAQGd,KARH,CAQST,IART;AASD,CAVD;;AAYAP,IAAII,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzCT,UAAQiC,YAAR,CAAqB1B,IAAII,KAAJ,CAAUuB,OAA/B,EACIpB,IADJ,CACS,UAACqB,KAAD,EAAW;AACnBC,YAAQC,GAAR,CAAY,qBAAqBF,KAAjC;AACA3B,QAAIJ,IAAJ,CAAS,EAAC,SAAS+B,KAAV,EAAT;AACG,GAJJ,EAKIjB,KALJ,CAKUT,IALV;AAMA,CAPD;;AAUAP,IAAIoC,GAAJ,CAAQ,GAAR,EAAa,UAAC/B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7BD,MAAIJ,IAAJ,CAAS,EAAE,WAAW,aAAb,EAAT;AACH,CAFD;;AAKA,IAAMmC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAxC,IAAIyC,MAAJ,CAAWJ,IAAX,EAAiB,YAAM;AACnBH,UAAQC,GAAR,oCAA6CE,IAA7C;AACH,CAFD","file":"index.js","sourcesContent":["// om namah shivay\nrequire('dotenv').config();\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst account = require('./account');\n\nconst relay = require('./relay');\nconst app = express();\n\n\napp.use(bodyParser.json({ type: 'application/json' }))\n\n\napp.all('/createAccount', (req, res, next) => {\n  let publicKey = req.query.publicKey;\n  let username = req.query.username;\n  account.createAccount(username, publicKey)\n    .then((user) => {\n      res.json({contractAddress: user.contract_address});\n    })\n    .catch(next);\n});\n\napp.post('/relayMessage', (req, res, next) => {\n  let username = req.body.username;\n  let signature = req.body.signature;\n  let contractAddress = req.body.contractAddress;\n  let action = req.body.action;\n  let params = req.body.params;\n\n  switch (action) {\n    case 'sendTransaction':\n      relay.relaySendTransactionMessage(username, signature, contractAddress, action, params)\n        .then((result) => {\n          res.json({result: result});\n        });\n      break; \n    default: \n      res.json({'error': 'Action not recognized: ' + action});\n      break\n  }\n  \n});\n\napp.all('/getUsers', (req, res, next) => {\n  account.getUsers()\n    .then((users) => {\n      res\n        .status(200)\n        .set('Content-Type', 'text/plain')\n        .send(`Last 10 users:\\n${users.join('\\n')}`)\n        .end();\n    })\n    .catch(next);\n});\n\napp.all('/getTxInfo', (req, res, next) => {\n\taccount.getUserNonce(req.query.address)\n    .then((nonce) => {\n\t\tconsole.log('got user nonce: ' + nonce);\n\t\tres.json({'nonce': nonce});\n    })\n    .catch(next);\n});\n\n\napp.get('/', (req, res, next) => {\n    res.json({ 'message': 'hello world' });\n});\n\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n    console.log(`Node server listening on port ${port}`);\n});\n"]}