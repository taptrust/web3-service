{"version":3,"sources":["../src/index.js"],"names":["express","require","bodyParser","account","relay","app","use","json","type","all","req","res","next","username","query","publicKey","createAccount","then","user","contractAddress","contract_address","catch","post","body","message","relayMessage","result","getUsers","users","status","set","send","join","end","get","port","process","env","PORT","listen","console","log"],"mappings":";;AAAA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,IAAME,UAAUF,QAAQ,WAAR,CAAhB;;AAEA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;;AAEA,IAAMI,MAAML,SAAZ;;AAEAK,IAAIC,GAAJ,CAAQJ,WAAWK,IAAX,CAAgB,EAAEC,MAAM,kBAAR,EAAhB,CAAR;;AAGAH,IAAII,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIC,WAAWH,IAAII,KAAJ,CAAUD,QAAzB;AACA,MAAIE,YAAYL,IAAII,KAAJ,CAAUC,SAA1B;AACAZ,UAAQa,aAAR,CAAsBH,QAAtB,EAAgCE,SAAhC,EACGE,IADH,CACQ,UAACC,IAAD,EAAU;AACdP,QAAIJ,IAAJ,CAAS,EAACY,iBAAiBD,KAAKE,gBAAvB,EAAT;AACD,GAHH,EAIGC,KAJH,CAIST,IAJT;AAMD,CATD;;AAWAP,IAAIiB,IAAJ,CAAS,eAAT,EAA0B,UAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIC,WAAWH,IAAIa,IAAJ,CAASV,QAAxB;AACA,MAAIW,UAAUd,IAAIa,IAAJ,CAASC,OAAvB;AACApB,QAAMqB,YAAN,CAAmBZ,QAAnB,EAA6BW,OAA7B,EACGP,IADH,CACQ,UAACS,MAAD,EAAY;AAChBf,QAAIJ,IAAJ,CAAS,EAACmB,QAAQA,MAAT,EAAT;AACD,GAHH;AAID,CAPD;;AASArB,IAAII,GAAJ,CAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvCT,UAAQwB,QAAR,GACGV,IADH,CACQ,UAACW,KAAD,EAAW;AACfjB,QACGkB,MADH,CACU,GADV,EAEGC,GAFH,CAEO,cAFP,EAEuB,YAFvB,EAGGC,IAHH,sBAG2BH,MAAMI,IAAN,CAAW,IAAX,CAH3B,EAIGC,GAJH;AAKD,GAPH,EAQGZ,KARH,CAQST,IART;AASD,CAVD;;AAaAP,IAAI6B,GAAJ,CAAQ,GAAR,EAAa,UAACxB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7BD,MAAIJ,IAAJ,CAAS,EAAE,WAAW,aAAb,EAAT;AACH,CAFD;;AAKA,IAAM4B,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAjC,IAAIkC,MAAJ,CAAWJ,IAAX,EAAiB,YAAM;AACnBK,UAAQC,GAAR,oCAA6CN,IAA7C;AACH,CAFD","file":"index.js","sourcesContent":["// om namah shivay\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst account = require('./account');\n\nconst relay = require('./relay');\n\nconst app = express();\n\napp.use(bodyParser.json({ type: 'application/json' }))\n\n\napp.all('/createAccount', (req, res, next) => {\n  let username = req.query.username;\n  let publicKey = req.query.publicKey;\n  account.createAccount(username, publicKey)\n    .then((user) => {\n      res.json({contractAddress: user.contract_address});\n    })\n    .catch(next);\n\n});\n\napp.post('/relayMessage', (req, res, next) => {\n  let username = req.body.username;\n  let message = req.body.message;\n  relay.relayMessage(username, message)\n    .then((result) => {\n      res.json({result: result});\n    });\n});\n\napp.all('/getUsers', (req, res, next) => {\n  account.getUsers()\n    .then((users) => {\n      res\n        .status(200)\n        .set('Content-Type', 'text/plain')\n        .send(`Last 10 users:\\n${users.join('\\n')}`)\n        .end();\n    })\n    .catch(next);\n});\n\n\napp.get('/', (req, res, next) => {\n    res.json({ 'message': 'hello world' });\n});\n\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n    console.log(`Node server listening on port ${port}`);\n});\n"]}