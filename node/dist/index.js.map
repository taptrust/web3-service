{"version":3,"sources":["../src/index.js"],"names":["express","require","bodyParser","account","relay","app","use","json","type","all","req","res","next","username","query","publicKey","createAccount","then","user","contractAddress","contract_address","catch","post","body","signature","action","txParams","relayMessage","result","getUsers","users","status","set","send","join","end","get","port","process","env","PORT","listen","console","log"],"mappings":";;AAAA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,IAAME,UAAUF,QAAQ,WAAR,CAAhB;;AAEA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;AACA,IAAMI,MAAML,SAAZ;;AAEAK,IAAIC,GAAJ,CAAQJ,WAAWK,IAAX,CAAgB,EAAEC,MAAM,kBAAR,EAAhB,CAAR;;AAGAH,IAAII,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIC,WAAWH,IAAII,KAAJ,CAAUD,QAAzB;AACA,MAAIE,YAAYL,IAAII,KAAJ,CAAUC,SAA1B;AACAZ,UAAQa,aAAR,CAAsBH,QAAtB,EAAgCE,SAAhC,EACGE,IADH,CACQ,UAACC,IAAD,EAAU;AACdP,QAAIJ,IAAJ,CAAS,EAACY,iBAAiBD,KAAKE,gBAAvB,EAAT;AACD,GAHH,EAIGC,KAJH,CAIST,IAJT;AAMD,CATD;;AAWAP,IAAIiB,IAAJ,CAAS,eAAT,EAA0B,UAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIC,WAAWH,IAAIa,IAAJ,CAASV,QAAxB;AACA,MAAIW,YAAYd,IAAIa,IAAJ,CAASC,SAAzB;AACA,MAAIL,kBAAkBT,IAAII,KAAJ,CAAUK,eAAhC;AACA,MAAIM,SAASf,IAAII,KAAJ,CAAUW,MAAvB;AACA,MAAIC,WAAWhB,IAAII,KAAJ,CAAUY,QAAzB;;AAEAtB,QAAMuB,YAAN,CAAmBd,QAAnB,EAA6BW,SAA7B,EAAwCL,eAAxC,EAAyDM,MAAzD,EAAiEC,QAAjE,EACGT,IADH,CACQ,UAACW,MAAD,EAAY;AAChBjB,QAAIJ,IAAJ,CAAS,EAACqB,QAAQA,MAAT,EAAT;AACD,GAHH;AAID,CAXD;;AAaAvB,IAAII,GAAJ,CAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvCT,UAAQ0B,QAAR,GACGZ,IADH,CACQ,UAACa,KAAD,EAAW;AACfnB,QACGoB,MADH,CACU,GADV,EAEGC,GAFH,CAEO,cAFP,EAEuB,YAFvB,EAGGC,IAHH,sBAG2BH,MAAMI,IAAN,CAAW,IAAX,CAH3B,EAIGC,GAJH;AAKD,GAPH,EAQGd,KARH,CAQST,IART;AASD,CAVD;;AAaAP,IAAI+B,GAAJ,CAAQ,GAAR,EAAa,UAAC1B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7BD,MAAIJ,IAAJ,CAAS,EAAE,WAAW,aAAb,EAAT;AACH,CAFD;;AAKA,IAAM8B,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAnC,IAAIoC,MAAJ,CAAWJ,IAAX,EAAiB,YAAM;AACnBK,UAAQC,GAAR,oCAA6CN,IAA7C;AACH,CAFD","file":"index.js","sourcesContent":["// om namah shivay\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst account = require('./account');\r\n\r\nconst relay = require('./relay');\r\nconst app = express();\r\n\r\napp.use(bodyParser.json({ type: 'application/json' }))\r\n\r\n\r\napp.all('/createAccount', (req, res, next) => {\r\n  let username = req.query.username;\r\n  let publicKey = req.query.publicKey;\r\n  account.createAccount(username, publicKey)\r\n    .then((user) => {\r\n      res.json({contractAddress: user.contract_address});\r\n    })\r\n    .catch(next);\r\n\r\n});\r\n\r\napp.post('/relayMessage', (req, res, next) => {\r\n  let username = req.body.username;\r\n  let signature = req.body.signature;\r\n  let contractAddress = req.query.contractAddress;\r\n  let action = req.query.action;\r\n  let txParams = req.query.txParams;\r\n  \r\n  relay.relayMessage(username, signature, contractAddress, action, txParams)\r\n    .then((result) => {\r\n      res.json({result: result});\r\n    });\r\n});\r\n\r\napp.all('/getUsers', (req, res, next) => {\r\n  account.getUsers()\r\n    .then((users) => {\r\n      res\r\n        .status(200)\r\n        .set('Content-Type', 'text/plain')\r\n        .send(`Last 10 users:\\n${users.join('\\n')}`)\r\n        .end();\r\n    })\r\n    .catch(next);\r\n});\r\n\r\n\r\napp.get('/', (req, res, next) => {\r\n    res.json({ 'message': 'hello world' });\r\n});\r\n\r\n\r\nconst port = process.env.PORT || 8080;\r\napp.listen(port, () => {\r\n    console.log(`Node server listening on port ${port}`);\r\n});\r\n"]}