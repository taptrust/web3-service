{"version":3,"sources":["../src/account.js"],"names":["username","publicKey","pubKey","web3","utils","hexToBytes","tx","gas","toHex","to","FactoryAddress","data","FactoryContract","methods","createNewWallet","encodeABI","signingAccount","signTransaction","signedTx","console","log","rawTransaction","Promise","resolve","reject","eth","sendSignedTransaction","once","receipt","logs","topic","topics","address","substring","on","result","value","error","saveAccountAddress","user","createAccount","contractAddress","WalletContract","web3interface","getWalletContract","nextNonce","call","getUserNonce","Datastore","require","ProxyWalletABI","datastore","projectId","keyFilename","getUsers","query","createQuery","order","descending","limit","runQuery","then","results","entities","map","entity","contract_address","userKey","key","get","upsert"],"mappings":"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","file":"account.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\nconst web3interface = require('./web3interface');\nconst web3 = web3interface.web3;\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\nconst signingAccount = web3interface.signingAccount;\nconst FactoryContract = web3interface.FactoryContract;\nconst FactoryAddress = web3interface.FactoryAddress;\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: 'service_account.json'\n  // service_account.json is not included in git repository\n});\n\n/**\n * Retrieve the latest 10 user records from the database.\n */\nconst getUsers = () => {\n  const query = datastore.createQuery('User')\n    .order('created', { descending: true })\n    .limit(10);\n\n  return datastore.runQuery(query)\n    .then((results) => {\n      const entities = results[0];\n      return entities.map((entity) => `Username: ${entity.username}, Address: ${entity.contract_address}`);\n    });\n}\n\nconst saveAccountAddress = (username, contractAddress) => {\n  // Right now the public key and username are already saved from the TapTrust python server.\n  // Only the contract address needs to be saved at this time.\n  const userKey = datastore.key(['User', username]);\n  return new Promise(function(resolve, reject) {\n    datastore.get(userKey).then(results => {\n      const entity = results[0];\n      entity.contract_address = contractAddress;\n      datastore.upsert(entity).then(() => {\n        // Entity updated successfully.\n        console.log('successfuly saved address for ' + username);\n        resolve(entity);\n      });\n    });\n  });\n};\n\nasync function createAccount(username, publicKey){\n\tvar pubKey = web3.utils.hexToBytes(publicKey);\n\t\n\tvar tx = {\n\t\tgas:  web3.utils.toHex(3000000),\n\t\tto: FactoryAddress, \n\t\tdata: FactoryContract.methods.createNewWallet(pubKey).encodeABI(),\n\t};\n\t\n\tvar signedTx = await signingAccount.signTransaction(tx);\n\t\n\tconsole.log(\"Sending Raw Transaction: \" + signedTx.rawTransaction);\n\t\n\tvar result = await new Promise(function(resolve, reject) {\n\t\tweb3.eth.sendSignedTransaction(signedTx.rawTransaction)\n\t\t\t.once('receipt', function(receipt){\n\t\t\t\tvar log = receipt.logs[0];\n\t\t\t\tvar topic = log.topics[1];\n\t\t\t\tvar address = \"0x\"+topic.substring(26);\n\t\t\t\tconsole.log(\"found address \" + address);\n\t\t\t\tresolve(address);\n\t\t\t})\n\t\t\t.on('transactionHash', console.log);\n\t});\n\t\n\tconsole.log('Contract created at address: ' + result);\n\t\n\ttx = {\n\t\tgas:  web3.utils.toHex(100000),\n\t\tto: result,\n\t\tvalue: web3.utils.toHex('10000000000000000')\n\t};\n\t\n\tsignedTx = await signingAccount.signTransaction(tx);\n\t\n\tconsole.log(\"Sending Raw Transaction: \" + signedTx.rawTransaction);\n\t\n\tawait new Promise(function(resolve, reject) {\n\t\tweb3.eth.sendSignedTransaction(signedTx.rawTransaction)\n\t\t\t.once('receipt', function(receipt){\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.on('transactionHash', console.log)\n\t\t\t.on('error', console.error);\n\t});\n\n    const user = await saveAccountAddress(username, result);\n    return user;\n}\n\nasync function getUserNonce(contractAddress){\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\n\tvar nextNonce = await WalletContract.methods.nextNonce().call();\n\t\n\treturn nextNonce;\n}\n\nexport {\n    getUsers, createAccount, getUserNonce\n};\n"]}