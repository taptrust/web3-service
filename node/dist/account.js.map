{"version":3,"sources":["../src/account.js"],"names":["username","publicKey","web3","eth","getAccounts","accounts","console","log","ProxyWalletBytecode","Contract","ProxyWalletABI","deploy","data","arguments","send","gas","from","result","options","address","contractAddress","saveAccountAddress","user","createAccount","Datastore","require","fs","ProxyWallet","JSON","parse","readFileSync","stringify","myContract","gasPrice","datastore","projectId","keyFilename","getUsers","query","createQuery","order","descending","limit","runQuery","then","results","entities","map","entity","contract_address","userKey","key","Promise","resolve","reject","get","upsert"],"mappings":"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","file":"account.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\r\nconst web3 = require('./web3interface').web3;\r\n\r\nconst fs = require('fs');\r\nconst ProxyWallet = JSON.parse(fs.readFileSync('./contracts/ProxyWallet.json', 'utf8'));\r\nconst ProxyWalletABI = ProxyWallet['abi'];\r\nconst ProxyWalletBytecode = JSON.stringify(ProxyWallet['bytecode']);\r\n\r\n\r\nvar myContract = new web3.eth.Contract(ProxyWalletABI, {\r\n\tfrom: '0x0eEB66338d9672Ba67a4342ECE388E4026f9b43d',\r\n\tgas: '15000000',\r\n\tgasPrice: 20000000000,\r\n});\r\n\r\n// Creates a client\r\nconst datastore = new Datastore({\r\n  projectId: 'tap-trust',\r\n  keyFilename: 'service_account.json'\r\n  // service_account.json is not included in git repository\r\n});\r\n\r\n/**\r\n * Retrieve the latest 10 user records from the database.\r\n */\r\nconst getUsers = () => {\r\n  const query = datastore.createQuery('User')\r\n    .order('created', { descending: true })\r\n    .limit(10);\r\n\r\n  return datastore.runQuery(query)\r\n    .then((results) => {\r\n      const entities = results[0];\r\n      return entities.map((entity) => `Username: ${entity.username}, Address: ${entity.contract_address}`);\r\n    });\r\n}\r\n\r\nconst saveAccountAddress = (username, contractAddress) => {\r\n  // Right now the public key and username are already saved from the TapTrust python server.\r\n  // Only the contract address needs to be saved at this time.\r\n  const userKey = datastore.key(['User', username]);\r\n  return new Promise(function(resolve, reject) {\r\n    datastore.get(userKey).then(results => {\r\n      const entity = results[0];\r\n      entity.contract_address = contractAddress;\r\n      datastore.upsert(entity).then(() => {\r\n        // Entity updated successfully.\r\n        console.log('successfuly saved address for ' + username);\r\n        resolve(entity);\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nasync function createAccount(username, publicKey){\r\n\tconst accounts = await web3.eth.getAccounts();\r\n\t\r\n\tconsole.log(ProxyWalletBytecode);\r\n\t\r\n\tconst result = await new web3.eth.Contract(ProxyWalletABI)\r\n\t\t .deploy({ \r\n\t\t\tdata: ProxyWalletBytecode,\r\n\t\t\targuments: [['0x0eEB66338d9672Ba67a4342ECE388E4026f9b43d'], username, publicKey]\r\n\t\t\t})\r\n\t\t .send({ gas: '1000000', from: accounts[0] });\r\n    \r\n\tconsole.log('Contract created at address: ' + result.options.address);\r\n\t\r\n    const contractAddress = result.options.address;\r\n    const user = await saveAccountAddress(username, contractAddress);\r\n    return user;\r\n}\r\n\r\nexport {\r\n    getUsers, createAccount\r\n};\r\n"]}