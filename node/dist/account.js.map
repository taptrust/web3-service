{"version":3,"sources":["../src/account.js"],"names":["username","publicKey","pubKey","web3","utils","hexToBytes","web3interface","nextNonce","tx","gas","toHex","to","FactoryAddress","data","FactoryContract","methods","createNewWallet","encodeABI","signingAccount","signTransaction","signedTx","console","log","rawTransaction","Promise","resolve","reject","eth","sendSignedTransaction","once","receipt","logs","topic","topics","address","substring","on","result","saveAccountAddress","user","createAccount","contractAddress","WalletContract","getWalletContract","call","getUserNonce","Tx","require","Datastore","ProxyWalletABI","datastore","projectId","keyFilename","getUsers","query","createQuery","order","descending","limit","runQuery","then","results","entities","map","entity","contract_address","userKey","key","get","upsert"],"mappings":"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","file":"account.js","sourcesContent":["const Tx = require('ethereumjs-tx');\nconst Datastore = require('@google-cloud/datastore');\nconst web3interface = require('./web3interface');\nconst web3 = web3interface.web3;\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\nconst signingAccount = web3interface.signingAccount;\nconst FactoryContract = web3interface.FactoryContract;\nconst FactoryAddress = web3interface.FactoryAddress;\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: 'service_account.json'\n  // service_account.json is not included in git repository\n});\n\n/**\n * Retrieve the latest 10 user records from the database.\n */\nconst getUsers = () => {\n  const query = datastore.createQuery('User')\n    .order('created', { descending: true })\n    .limit(10);\n\n  return datastore.runQuery(query)\n    .then((results) => {\n      const entities = results[0];\n      return entities.map((entity) => `Username: ${entity.username}, Address: ${entity.contract_address}`);\n    });\n}\n\nconst saveAccountAddress = (username, contractAddress) => {\n  // Right now the public key and username are already saved from the TapTrust python server.\n  // Only the contract address needs to be saved at this time.\n  const userKey = datastore.key(['User', username]);\n  return new Promise(function(resolve, reject) {\n    datastore.get(userKey).then(results => {\n      const entity = results[0];\n      entity.contract_address = contractAddress;\n      datastore.upsert(entity).then(() => {\n        // Entity updated successfully.\n        console.log('successfuly saved address for ' + username);\n        resolve(entity);\n      });\n    });\n  });\n};\n\nasync function createAccount(username, publicKey){\n\tvar pubKey = web3.utils.hexToBytes(publicKey);\n\tvar nextNonce = await web3interface.nextNonce();\n\t\n\tvar tx = {\n\t\tgas:  web3.utils.toHex(3000000),\n\t\tto: FactoryAddress, \n\t\tdata: FactoryContract.methods.createNewWallet(pubKey).encodeABI(),\n\t};\n\t\n\tvar signedTx = await signingAccount.signTransaction(tx);\n\t\n\tconsole.log(\"Sending Raw Transaction: \" + signedTx.rawTransaction);\n\t\n\tvar result = await new Promise(function(resolve, reject) {\n\t\tweb3.eth.sendSignedTransaction(signedTx.rawTransaction)\n\t\t\t.once('receipt', function(receipt){\n\t\t\t\tvar log = receipt.logs[0];\n\t\t\t\tvar topic = log.topics[1];\n\t\t\t\tvar address = \"0x\"+topic.substring(26);\n\t\t\t\tconsole.log(\"found\" + address);\n\t\t\t\tresolve(address);\n\t\t\t})\n\t\t\t.on('transactionHash', console.log);\n\t});\n\t\n\tconsole.log('Contract created at address: ' + result);\n\n    const user = await saveAccountAddress(username, result);\n    return user;\n}\n\nasync function getUserNonce(contractAddress){\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\n\tvar nextNonce = await WalletContract.methods.nextNonce().call();\n\t\n\treturn nextNonce;\n}\n\nexport {\n    getUsers, createAccount, getUserNonce\n};\n"]}