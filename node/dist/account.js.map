{"version":3,"sources":["../src/account.js"],"names":["username","publicKey","contractAddress","saveAccountAddress","user","createAccount","Datastore","require","datastore","projectId","keyFilename","getUsers","query","createQuery","order","descending","limit","runQuery","then","results","entities","map","entity","contract_address","userKey","key","Promise","resolve","reject","get","upsert","console","log"],"mappings":";;;;;;;;;;;;;;;;sFA2CA,iBAA6BA,QAA7B,EAAuCC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACA;AACMC,2BAHV,GAG4B,cAAcF,QAH1C;AAAA;AAAA,mBAIuBG,mBAAmBH,QAAnB,EAA6BE,eAA7B,CAJvB;;AAAA;AAIUE,gBAJV;AAAA,6CAKWA,IALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,a;;;;;;;AA3Cf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;;AAEA;AACA,IAAMC,YAAY,IAAIF,SAAJ,CAAc;AAC9BG,aAAW,WADmB;AAE9BC,eAAa;AACb;AAH8B,CAAd,CAAlB;;AAQA;;;AAGA,IAAMC,WAAW,SAAXA,QAAW,GAAM;AACrB,MAAMC,QAAQJ,UAAUK,WAAV,CAAsB,MAAtB,EACXC,KADW,CACL,SADK,EACM,EAAEC,YAAY,IAAd,EADN,EAEXC,KAFW,CAEL,EAFK,CAAd;;AAIA,SAAOR,UAAUS,QAAV,CAAmBL,KAAnB,EACJM,IADI,CACC,UAACC,OAAD,EAAa;AACjB,QAAMC,WAAWD,QAAQ,CAAR,CAAjB;AACA,WAAOC,SAASC,GAAT,CAAa,UAACC,MAAD;AAAA,4BAAyBA,OAAOtB,QAAhC,mBAAsDsB,OAAOC,gBAA7D;AAAA,KAAb,CAAP;AACD,GAJI,CAAP;AAKD,CAVD;;AAYA,IAAMpB,qBAAqB,SAArBA,kBAAqB,CAACH,QAAD,EAAWE,eAAX,EAA+B;AACxD;AACA;AACA,MAAMsB,UAAUhB,UAAUiB,GAAV,CAAc,CAAC,MAAD,EAASzB,QAAT,CAAd,CAAhB;AACA,SAAO,IAAI0B,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CpB,cAAUqB,GAAV,CAAcL,OAAd,EAAuBN,IAAvB,CAA4B,mBAAW;AACrC,UAAMI,SAASH,QAAQ,CAAR,CAAf;AACAG,aAAOC,gBAAP,GAA0BrB,eAA1B;AACAM,gBAAUsB,MAAV,CAAiBR,MAAjB,EAAyBJ,IAAzB,CAA8B,YAAM;AAClC;AACAa,gBAAQC,GAAR,CAAY,mCAAmChC,QAA/C;AACA2B,gBAAQL,MAAR;AACD,OAJD;AAKD,KARD;AASD,GAVM,CAAP;AAWD,CAfD;;QA4BIX,Q,GAAAA,Q;QAAUN,a,GAAAA,a","file":"account.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: '../service_account.json'\n  // service_account.json is not included in git repository\n});\n\n\n\n/**\n * Retrieve the latest 10 user records from the database.\n */\nconst getUsers = () => {\n  const query = datastore.createQuery('User')\n    .order('created', { descending: true })\n    .limit(10);\n\n  return datastore.runQuery(query)\n    .then((results) => {\n      const entities = results[0];\n      return entities.map((entity) => `Username: ${entity.username}, Address: ${entity.contract_address}`);\n    });\n}\n\nconst saveAccountAddress = (username, contractAddress) => {\n  // Right now the public key and username are already saved from the TapTrust python server.\n  // Only the contract address needs to be saved at this time.\n  const userKey = datastore.key(['User', username]);\n  return new Promise(function(resolve, reject) {\n    datastore.get(userKey).then(results => {\n      const entity = results[0];\n      entity.contract_address = contractAddress;\n      datastore.upsert(entity).then(() => {\n        // Entity updated successfully.\n        console.log('successfuly saved address for ' + username);\n        resolve(entity);\n      });\n    });\n  });\n};\n\nasync function createAccount(username, publicKey){\n    // TODO: Use Infura to deploy user contract with specified username/publicKey\n    // Also modify the line below to use the correct address for the deployed contract\n    const contractAddress = '0x_test--' + username;\n    const user = await saveAccountAddress(username, contractAddress);\n    return user;\n}\n\n\n\nexport {\n    getUsers, createAccount\n};\n"]}