{"version":3,"sources":["../src/relay.js"],"names":["username","message","relayMessageSend","result","relayMessage","Datastore","require","datastore","projectId","keyFilename","userKey","key","Promise","resolve","reject","get","then","entity","results","txhash"],"mappings":";;;;;;;;;;;;;;;;sFAwBA,iBAA4BA,QAA5B,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIuBC,iBAAiBF,QAAjB,EAA2BC,OAA3B,CAJvB;;AAAA;AAIQE,kBAJR;AAAA,6CAKWA,MALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,Y;;;;;;;AAvBf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;;AAEA;AACA,IAAMC,YAAY,IAAIF,SAAJ,CAAc;AAC9BG,aAAW,WADmB;AAE9BC,eAAa;AACb;AAH8B,CAAd,CAAlB;;AAOA,IAAMP,mBAAmB,SAAnBA,gBAAmB,CAACF,QAAD,EAAWC,OAAX,EAAuB;AAC9C;AACA;AACA,MAAMS,UAAUH,UAAUI,GAAV,CAAc,CAAC,MAAD,EAASX,QAAT,CAAd,CAAhB;AACA,SAAO,IAAIY,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CP,cAAUQ,GAAV,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,mBAAW;AACrC,UAAMC,SAASC,QAAQ,CAAR,CAAf;AACA;AACAL,cAAQ,EAACM,QAAQ,iBAAT,EAAR;AACD,KAJD;AAKD,GANM,CAAP;AAOD,CAXD;;QAwBIf,Y,GAAAA,Y","file":"relay.js","sourcesContent":["\nconst Datastore = require('@google-cloud/datastore');\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: '../service_account.json'\n  // service_account.json is not included in git repository\n});\n\n\nconst relayMessageSend = (username, message) => {\n  // Right now the public key and username are already saved from the TapTrust python server.\n  // Only the contract address needs to be saved at this time.\n  const userKey = datastore.key(['User', username]);\n  return new Promise(function(resolve, reject) {\n    datastore.get(userKey).then(results => {\n      const entity = results[0];\n      // TODO: relay message to this contract address\n      resolve({txhash: 'example-tx-hash'});\n    });\n  });\n};\n\nasync function relayMessage(username, message){\n    // TODO: Use Infura to relay message to the user's contract\n    // also save results (tx hash, status) to datastore\n    // There will need to be some process in the event of transaction failure.\n    let result = await relayMessageSend(username, message);\n    return result;\n}\n\n\n\nexport {\n    relayMessage\n};\n"]}