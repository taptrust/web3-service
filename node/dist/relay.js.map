{"version":3,"sources":["../src/relay.js"],"names":["username","signature","contractAddress","action","params","txHash","userKey","datastore","key","get","then","entity","results","txs","push","upsert","console","log","resolve","relayMessageSave","txParams","WalletContract","web3interface","getWalletContract","tx","gas","web3","utils","toHex","to","gasPrice","toBN","data","methods","sendTransaction","nonce","gasLimit","value","encodeABI","signingAccount","signTransaction","signedTx","address","rawTransaction","Promise","reject","eth","sendSignedTransaction","once","receipt","on","relaySendTransactionMessage","Datastore","require","ProxyWalletABI","projectId","keyFilename"],"mappings":"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","file":"relay.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\nconst web3interface = require('./web3interface');\nconst web3 = web3interface.web3;\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\nconst signingAccount = web3interface.signingAccount;\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: 'service_account.json'\n  // service_account.json is not included in git repository\n});\n\nasync function relayMessageSave(username, signature, contractAddress, action, params, txHash) {\n  const userKey = datastore.key(['User', username]);\n  await datastore.get(userKey).then(results => {\n      const entity = results[0];\n      entity.txs = entity.txs || [];\n\t  entity.txs.push({\n\t\t  \"action\": action,\n\t\t  \"params\": params,\n\t\t  \"signature\": signature,\n\t\t  \"txHash\": txHash\n\t  });\n      datastore.upsert(entity).then(() => {\n        // Entity updated successfully.\n        console.log('successfully saved transaction record for ' + username);\n        resolve(entity);\n      });\n    });\n};\n\nasync function relaySendTransactionMessage(username, signature, contractAddress, action, txParams){\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\n\t\n\tvar tx = {\n\t\tgas:  web3.utils.toHex(3000000),\n\t\tto: contractAddress,\n\t\tgasPrice: web3.utils.toHex(web3.utils.toBN(txParams.gasPrice)),\n\t\tdata: WalletContract.methods.sendTransaction(\n\t\t\ttxParams.nonce, txParams.gasPrice, txParams.gasLimit, txParams.to, \n\t\t\ttxParams.value, txParams.data, signature).encodeABI()\n\t};\n\t\n\tvar signedTx = await signingAccount.signTransaction(tx);\n\n  console.log(`Relaying message with signing account ${signingAccount.address}`);\n  console.log(`Relaying message with user contract address ${contractAddress}`);\n  \n\tconsole.log(\"Sending Raw Transaction: \" + signedTx.rawTransaction);\n\t\n\tvar receipt = await new Promise(function(resolve, reject) {\n\t\tweb3.eth.sendSignedTransaction(signedTx.rawTransaction)\n\t\t\t.once('receipt', function(receipt){\n\t\t\t\tresolve(receipt);\n\t\t\t})\n\t\t\t.on('transactionHash', console.log)\n\t\t\t.on('error', reject);\n\t});\n\t\n    return {\"receipt\" : receipt};\n}\n\nexport {\n    relaySendTransactionMessage\n};\n"]}