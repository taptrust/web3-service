{"version":3,"sources":["../src/relay.js"],"names":["username","signature","contractAddress","action","params","txHash","userKey","datastore","key","get","then","entity","results","txs","push","upsert","console","log","resolve","relayMessageSave","txParams","WalletContract","web3interface","getWalletContract","methods","sendTransaction","nonce","gasPrice","gasLimit","to","value","data","send","on","_txHash","_receipt","receipt","_err","error","nextNonce","relaySendTransactionMessage","Datastore","require","web3","ProxyWalletABI","signingAccount","projectId","keyFilename"],"mappings":";;;;;;;;;;;;;;;;qFAaA,iBAAgCA,QAAhC,EAA0CC,SAA1C,EAAqDC,eAArD,EAAsEC,MAAtE,EAA8EC,MAA9E,EAAsFC,MAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,aADR,GACkBC,UAAUC,GAAV,CAAc,CAAC,MAAD,EAASR,QAAT,CAAd,CADlB;AAAA;AAAA,aAEQO,UAAUE,GAAV,CAAcH,OAAd,EAAuBI,IAAvB,CAA4B,mBAAW;AACzC,WAAMC,SAASC,QAAQ,CAAR,CAAf;AACAD,cAAOE,GAAP,GAAaF,OAAOE,GAAP,IAAc,EAA3B;AACHF,cAAOE,GAAP,CAAWC,IAAX,CAAgB;AACf,kBAAUX,MADK;AAEf,kBAAUC,MAFK;AAGf,qBAAaH,SAHE;AAIf,kBAAUI;AAJK,QAAhB;AAMGE,iBAAUQ,MAAV,CAAiBJ,MAAjB,EAAyBD,IAAzB,CAA8B,YAAM;AAClC;AACAM,gBAAQC,GAAR,CAAY,+CAA+CjB,QAA3D;AACAkB,gBAAQP,MAAR;AACD,QAJD;AAKD,OAdG,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeQ,gB;;;;;;sFAmBf,kBAA2CnB,QAA3C,EAAqDC,SAArD,EAAgEC,eAAhE,EAAiFC,MAAjF,EAAyFiB,QAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,oBADL,GACsBC,cAAcC,iBAAd,CAAgCrB,eAAhC,CADtB;AAAA;AAAA,aAIuBmB,eAAeG,OAAf,CAAuBC,eAAvB,CACrBC,KADqB,EACdN,SAASO,QADK,EACKP,SAASQ,QADd,EACwBR,SAASS,EADjC,EAErBT,SAASU,KAFY,EAELV,SAASW,IAFJ,EAEU9B,SAFV,EAEqB+B,IAFrB,GAGnBC,EAHmB,CAGhB,iBAHgB,EAGG,UAASC,OAAT,EAAkB;AACxCf,wBAAiBnB,QAAjB,EAA2BC,SAA3B,EAAsCC,eAAtC,EAAuDC,MAAvD,EAA+DiB,QAA/D,EAAyEc,OAAzE;AAAmF,OAJhE,EAKnBD,EALmB,CAKhB,SALgB,EAKL,UAASE,QAAT,EAAkB;AAAEC,iBAAUD,QAAV;AAAqB,OALpC,EAMnBF,EANmB,CAMhB,OANgB,EAMP,UAASI,IAAT,EAAcF,QAAd,EAAwB;AACpCG,eAAQD,IAAR;AACArB,eAAQsB,KAAR,CAAcD,IAAd;AACAD,iBAAUD,QAAV;AAAqB,OATF,CAJvB;;AAAA;AAIKI,eAJL;AAAA,wCAeW,EAAC,WAAYH,OAAb,EAAsB,SAAUE,KAAhC,EAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeE,2B;;;;;;;AAhCf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;AACA,IAAMpB,gBAAgBoB,QAAQ,iBAAR,CAAtB;AACA,IAAMC,OAAOrB,cAAcqB,IAA3B;AACA,IAAMC,iBAAiBtB,cAAcsB,cAArC;AACA,IAAMC,iBAAiBvB,cAAcuB,cAArC;;AAEA;AACA,IAAMtC,YAAY,IAAIkC,SAAJ,CAAc;AAC9BK,YAAW,WADmB;AAE9BC,cAAa;AACb;AAH8B,CAAd,CAAlB;;AAuBC;;QAqBGP,2B,GAAAA,2B","file":"relay.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\nconst web3interface = require('./web3interface');\nconst web3 = web3interface.web3;\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\nconst signingAccount = web3interface.signingAccount;\n\n// Creates a client\nconst datastore = new Datastore({\n  projectId: 'tap-trust',\n  keyFilename: 'service_account.json'\n  // service_account.json is not included in git repository\n});\n\nasync function relayMessageSave(username, signature, contractAddress, action, params, txHash) {\n  const userKey = datastore.key(['User', username]);\n  await datastore.get(userKey).then(results => {\n      const entity = results[0];\n      entity.txs = entity.txs || [];\n\t  entity.txs.push({\n\t\t  \"action\": action,\n\t\t  \"params\": params,\n\t\t  \"signature\": signature,\n\t\t  \"txHash\": txHash\n\t  });\n      datastore.upsert(entity).then(() => {\n        // Entity updated successfully.\n        console.log('successfully saved transaction record for ' + username);\n        resolve(entity);\n      });\n    });\n};\n\nasync function relaySendTransactionMessage(username, signature, contractAddress, action, txParams){\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\n\t\n\tvar receipt, error;\n\tvar nextNonce = await WalletContract.methods.sendTransaction(\n\t\tnonce, txParams.gasPrice, txParams.gasLimit, txParams.to, \n\t\ttxParams.value, txParams.data, signature).send()\n\t\t\t.on('transactionHash', function(_txHash) { \n\t\t\t\trelayMessageSave(username, signature, contractAddress, action, txParams, _txHash);} )\n\t\t\t.on('receipt', function(_receipt){ receipt = _receipt; })\n\t\t\t.on('error', function(_err,_receipt) { \n\t\t\t\terror = _err;\n\t\t\t\tconsole.error(_err); \n\t\t\t\treceipt = _receipt; });\n\t\n    return {\"receipt\" : receipt, \"error\" : error };\n}\n\nexport {\n    relaySendTransactionMessage\n};\n"]}