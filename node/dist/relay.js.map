{"version":3,"sources":["../src/relay.js"],"names":["username","signature","contractAddress","action","params","txHash","userKey","datastore","key","get","then","entity","results","txs","push","upsert","console","log","resolve","relayMessageSave","txParams","WalletContract","web3interface","getWalletContract","tx","gas","web3","utils","toHex","to","gasPrice","toBN","data","methods","sendTransaction","nonce","gasLimit","value","encodeABI","signingAccount","signTransaction","signedTx","rawTransaction","Promise","reject","eth","sendSignedTransaction","once","receipt","on","error","relaySendTransactionMessage","Datastore","require","ProxyWalletABI","projectId","keyFilename"],"mappings":";;;;;;;;;;;;;;;;qFAaA,iBAAgCA,QAAhC,EAA0CC,SAA1C,EAAqDC,eAArD,EAAsEC,MAAtE,EAA8EC,MAA9E,EAAsFC,MAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,aADR,GACkBC,UAAUC,GAAV,CAAc,CAAC,MAAD,EAASR,QAAT,CAAd,CADlB;AAAA;AAAA,aAEQO,UAAUE,GAAV,CAAcH,OAAd,EAAuBI,IAAvB,CAA4B,mBAAW;AACzC,WAAMC,SAASC,QAAQ,CAAR,CAAf;AACAD,cAAOE,GAAP,GAAaF,OAAOE,GAAP,IAAc,EAA3B;AACHF,cAAOE,GAAP,CAAWC,IAAX,CAAgB;AACf,kBAAUX,MADK;AAEf,kBAAUC,MAFK;AAGf,qBAAaH,SAHE;AAIf,kBAAUI;AAJK,QAAhB;AAMGE,iBAAUQ,MAAV,CAAiBJ,MAAjB,EAAyBD,IAAzB,CAA8B,YAAM;AAClC;AACAM,gBAAQC,GAAR,CAAY,+CAA+CjB,QAA3D;AACAkB,gBAAQP,MAAR;AACD,QAJD;AAKD,OAdG,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeQ,gB;;;;;;sFAmBf,kBAA2CnB,QAA3C,EAAqDC,SAArD,EAAgEC,eAAhE,EAAiFC,MAAjF,EAAyFiB,QAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,oBADL,GACsBC,cAAcC,iBAAd,CAAgCrB,eAAhC,CADtB;AAGKsB,QAHL,GAGU;AACRC,YAAMC,KAAKC,KAAL,CAAWC,KAAX,CAAiB,OAAjB,CADE;AAERC,WAAI3B,eAFI;AAGR4B,iBAAUJ,KAAKC,KAAL,CAAWC,KAAX,CAAiBF,KAAKC,KAAL,CAAWI,IAAX,CAAgBX,SAASU,QAAzB,CAAjB,CAHF;AAIRE,aAAMX,eAAeY,OAAf,CAAuBC,eAAvB,CACLd,SAASe,KADJ,EACWf,SAASU,QADpB,EAC8BV,SAASgB,QADvC,EACiDhB,SAASS,EAD1D,EAELT,SAASiB,KAFJ,EAEWjB,SAASY,IAFpB,EAE0B/B,SAF1B,EAEqCqC,SAFrC;AAJE,OAHV;AAAA;AAAA,aAYsBC,eAAeC,eAAf,CAA+BhB,EAA/B,CAZtB;;AAAA;AAYKiB,cAZL;;;AAcCzB,cAAQC,GAAR,CAAY,8BAA8BwB,SAASC,cAAnD;;AAdD;AAAA,aAgBqB,IAAIC,OAAJ,CAAY,UAASzB,OAAT,EAAkB0B,MAAlB,EAA0B;AACzDlB,YAAKmB,GAAL,CAASC,qBAAT,CAA+BL,SAASC,cAAxC,EACEK,IADF,CACO,SADP,EACkB,UAASC,OAAT,EAAiB;AACjC9B,gBAAQ8B,OAAR;AACA,QAHF,EAIEC,EAJF,CAIK,iBAJL,EAIwBjC,QAAQC,GAJhC,EAKEgC,EALF,CAKK,OALL,EAKcL,MALd;AAMA,OAPmB,CAhBrB;;AAAA;AAgBKI,aAhBL;AAAA,wCAyBW,EAAC,WAAYA,OAAb,EAAsB,SAAUE,KAAhC,EAzBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeC,2B;;;;;;;AAhCf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;AACA,IAAM/B,gBAAgB+B,QAAQ,iBAAR,CAAtB;AACA,IAAM3B,OAAOJ,cAAcI,IAA3B;AACA,IAAM4B,iBAAiBhC,cAAcgC,cAArC;AACA,IAAMf,iBAAiBjB,cAAciB,cAArC;;AAEA;AACA,IAAMhC,YAAY,IAAI6C,SAAJ,CAAc;AAC9BG,YAAW,WADmB;AAE9BC,cAAa;AACb;AAH8B,CAAd,CAAlB;;AAuBC;;QA+BGL,2B,GAAAA,2B","file":"relay.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\r\nconst web3interface = require('./web3interface');\r\nconst web3 = web3interface.web3;\r\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\r\nconst signingAccount = web3interface.signingAccount;\r\n\r\n// Creates a client\r\nconst datastore = new Datastore({\r\n  projectId: 'tap-trust',\r\n  keyFilename: 'service_account.json'\r\n  // service_account.json is not included in git repository\r\n});\r\n\r\nasync function relayMessageSave(username, signature, contractAddress, action, params, txHash) {\r\n  const userKey = datastore.key(['User', username]);\r\n  await datastore.get(userKey).then(results => {\r\n      const entity = results[0];\r\n      entity.txs = entity.txs || [];\r\n\t  entity.txs.push({\r\n\t\t  \"action\": action,\r\n\t\t  \"params\": params,\r\n\t\t  \"signature\": signature,\r\n\t\t  \"txHash\": txHash\r\n\t  });\r\n      datastore.upsert(entity).then(() => {\r\n        // Entity updated successfully.\r\n        console.log('successfully saved transaction record for ' + username);\r\n        resolve(entity);\r\n      });\r\n    });\r\n};\r\n\r\nasync function relaySendTransactionMessage(username, signature, contractAddress, action, txParams){\r\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\r\n\t\r\n\tvar tx = {\r\n\t\tgas:  web3.utils.toHex(3000000),\r\n\t\tto: contractAddress,\r\n\t\tgasPrice: web3.utils.toHex(web3.utils.toBN(txParams.gasPrice)),\r\n\t\tdata: WalletContract.methods.sendTransaction(\r\n\t\t\ttxParams.nonce, txParams.gasPrice, txParams.gasLimit, txParams.to, \r\n\t\t\ttxParams.value, txParams.data, signature).encodeABI()\r\n\t};\r\n\t\r\n\tvar signedTx = await signingAccount.signTransaction(tx);\r\n\t\r\n\tconsole.log(\"Sending Raw Transaction: \" + signedTx.rawTransaction);\r\n\t\r\n\tvar receipt = await new Promise(function(resolve, reject) {\r\n\t\tweb3.eth.sendSignedTransaction(signedTx.rawTransaction)\r\n\t\t\t.once('receipt', function(receipt){\r\n\t\t\t\tresolve(receipt);\r\n\t\t\t})\r\n\t\t\t.on('transactionHash', console.log)\r\n\t\t\t.on('error', reject);\r\n\t});\r\n\t\r\n    return {\"receipt\" : receipt, \"error\" : error };\r\n}\r\n\r\nexport {\r\n    relaySendTransactionMessage\r\n};\r\n"]}