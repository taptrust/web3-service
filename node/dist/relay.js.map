{"version":3,"sources":["../src/relay.js"],"names":["username","signature","contractAddress","action","txParams","relayMessageSend","result","relayMessage","Datastore","require","web3","datastore","projectId","keyFilename","userKey","key","Promise","resolve","reject","get","then","entity","results","txhash"],"mappings":";;;;;;;;;;;;;;;;sFAwBA,iBAA4BA,QAA5B,EAAsCC,SAAtC,EAAiDC,eAAjD,EAAkEC,MAAlE,EAA0EC,QAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIuBC,iBAAiBL,QAAjB,EAA2BC,SAA3B,EAAsCC,eAAtC,EAAuDC,MAAvD,EAA+DC,QAA/D,CAJvB;;AAAA;AAIQE,kBAJR;AAAA,6CAMWA,MANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,Y;;;;;;;AAxBf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;AACA,IAAMC,OAAOD,QAAQ,iBAAR,EAA2BC,IAAxC;;AAEA;AACA,IAAMC,YAAY,IAAIH,SAAJ,CAAc;AAC9BI,aAAW,WADmB;AAE9BC,eAAa;AACb;AAH8B,CAAd,CAAlB;;AAOA,IAAMR,mBAAmB,SAAnBA,gBAAmB,CAACL,QAAD,EAAWC,SAAX,EAAsBC,eAAtB,EAAuCC,MAAvC,EAA+CC,QAA/C,EAA4D;AACnF;AACA;AACA,MAAMU,UAAUH,UAAUI,GAAV,CAAc,CAAC,MAAD,EAASf,QAAT,CAAd,CAAhB;AACA,SAAO,IAAIgB,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CP,cAAUQ,GAAV,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,mBAAW;AACrC,UAAMC,SAASC,QAAQ,CAAR,CAAf;AACA;AACAL,cAAQ,EAACM,QAAQ,iBAAT,EAAR;AACD,KAJD;AAKD,GANM,CAAP;AAOD,CAXD;;QAuBIhB,Y,GAAAA,Y","file":"relay.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\r\nconst web3 = require('./web3interface').web3;\r\n\r\n// Creates a client\r\nconst datastore = new Datastore({\r\n  projectId: 'tap-trust',\r\n  keyFilename: 'service_account.json'\r\n  // service_account.json is not included in git repository\r\n});\r\n\r\n\r\nconst relayMessageSend = (username, signature, contractAddress, action, txParams) => {\r\n  // Right now the public key and username are already saved from the TapTrust python server.\r\n  // Only the contract address needs to be saved at this time.\r\n  const userKey = datastore.key(['User', username]);\r\n  return new Promise(function(resolve, reject) {\r\n    datastore.get(userKey).then(results => {\r\n      const entity = results[0];\r\n      // TODO: relay message to this contract address\r\n      resolve({txhash: 'example-tx-hash'});\r\n    });\r\n  });\r\n};\r\n\r\nasync function relayMessage(username, signature, contractAddress, action, txParams){\r\n    // TODO: Use Infura to relay message to the user's contract\r\n    // also save results (tx hash, status) to datastore\r\n    // There will need to be some process in the event of transaction failure.\r\n    let result = await relayMessageSend(username, signature, contractAddress, action, txParams);\r\n\r\n    return result;\r\n}\r\n\r\nexport {\r\n    relayMessage\r\n};\r\n"]}