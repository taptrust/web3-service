{"version":3,"sources":["../src/relay.js"],"names":["username","signature","contractAddress","action","txParam","txHash","userKey","datastore","key","get","then","entity","results","txs","push","txParams","upsert","console","log","resolve","relayMessageSave","WalletContract","web3interface","getWalletContract","methods","sendTransaction","nonce","gasPrice","gasLimit","to","value","data","send","on","_txHash","_receipt","receipt","_err","error","nextNonce","relayMessage","Datastore","require","web3","ProxyWalletABI","signingAccount","projectId","keyFilename"],"mappings":";;;;;;;;;;;;;;;;qFAaA,iBAAgCA,QAAhC,EAA0CC,SAA1C,EAAqDC,eAArD,EAAsEC,MAAtE,EAA8EC,OAA9E,EAAuFC,MAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,aADR,GACkBC,UAAUC,GAAV,CAAc,CAAC,MAAD,EAASR,QAAT,CAAd,CADlB;AAAA;AAAA,aAEQO,UAAUE,GAAV,CAAcH,OAAd,EAAuBI,IAAvB,CAA4B,mBAAW;AACzC,WAAMC,SAASC,QAAQ,CAAR,CAAf;AACAD,cAAOE,GAAP,GAAaF,OAAOE,GAAP,IAAc,EAA3B;AACHF,cAAOE,GAAP,CAAWC,IAAX,CAAgB;AACf,kBAAUX,MADK;AAEf,oBAAYY,QAFG;AAGf,qBAAad,SAHE;AAIf,kBAAUI;AAJK,QAAhB;AAMGE,iBAAUS,MAAV,CAAiBL,MAAjB,EAAyBD,IAAzB,CAA8B,YAAM;AAClC;AACAO,gBAAQC,GAAR,CAAY,8CAA8ClB,QAA1D;AACAmB,gBAAQR,MAAR;AACD,QAJD;AAKD,OAdG,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeS,gB;;;;;;sFAmBf,kBAA4BpB,QAA5B,EAAsCC,SAAtC,EAAiDC,eAAjD,EAAkEC,MAAlE,EAA0EY,QAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AACKM,oBADL,GACsBC,cAAcC,iBAAd,CAAgCrB,eAAhC,CADtB;AAAA;AAAA,aAIuBmB,eAAeG,OAAf,CAAuBC,eAAvB,CACrBC,KADqB,EACdX,SAASY,QADK,EACKZ,SAASa,QADd,EACwBb,SAASc,EADjC,EAErBd,SAASe,KAFY,EAELf,SAASgB,IAFJ,EAEU9B,SAFV,EAEqB+B,IAFrB,GAGnBC,EAHmB,CAGhB,iBAHgB,EAGG,UAASC,OAAT,EAAkB;AACxCd,wBAAiBpB,QAAjB,EAA2BC,SAA3B,EAAsCC,eAAtC,EAAuDC,MAAvD,EAA+DY,QAA/D,EAAyEmB,OAAzE;AAAmF,OAJhE,EAKnBD,EALmB,CAKhB,SALgB,EAKL,UAASE,QAAT,EAAkB;AAAEC,iBAAUD,QAAV;AAAqB,OALpC,EAMnBF,EANmB,CAMhB,OANgB,EAMP,UAASI,IAAT,EAAcF,QAAd,EAAwB;AACpCG,eAAQD,IAAR;AACApB,eAAQqB,KAAR,CAAcD,IAAd;AACAD,iBAAUD,QAAV;AAAqB,OATF,CAJvB;;AAAA;AAIKI,eAJL;AAAA,wCAeW,EAAC,WAAYH,OAAb,EAAsB,SAAUE,KAAhC,EAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeE,Y;;;;;;;AAhCf,IAAMC,YAAYC,QAAQ,yBAAR,CAAlB;AACA,IAAMpB,gBAAgBoB,QAAQ,iBAAR,CAAtB;AACA,IAAMC,OAAOrB,cAAcqB,IAA3B;AACA,IAAMC,iBAAiBtB,cAAcsB,cAArC;AACA,IAAMC,iBAAiBvB,cAAcuB,cAArC;;AAEA;AACA,IAAMtC,YAAY,IAAIkC,SAAJ,CAAc;AAC9BK,YAAW,WADmB;AAE9BC,cAAa;AACb;AAH8B,CAAd,CAAlB;;AAuBC;;QAqBGP,Y,GAAAA,Y","file":"relay.js","sourcesContent":["const Datastore = require('@google-cloud/datastore');\r\nconst web3interface = require('./web3interface');\r\nconst web3 = web3interface.web3;\r\nconst ProxyWalletABI = web3interface.ProxyWalletABI;\r\nconst signingAccount = web3interface.signingAccount;\r\n\r\n// Creates a client\r\nconst datastore = new Datastore({\r\n  projectId: 'tap-trust',\r\n  keyFilename: 'service_account.json'\r\n  // service_account.json is not included in git repository\r\n});\r\n\r\nasync function relayMessageSave(username, signature, contractAddress, action, txParam, txHash) {\r\n  const userKey = datastore.key(['User', username]);\r\n  await datastore.get(userKey).then(results => {\r\n      const entity = results[0];\r\n      entity.txs = entity.txs || [];\r\n\t  entity.txs.push({\r\n\t\t  \"action\": action,\r\n\t\t  \"txParams\": txParams,\r\n\t\t  \"signature\": signature,\r\n\t\t  \"txHash\": txHash\r\n\t  });\r\n      datastore.upsert(entity).then(() => {\r\n        // Entity updated successfully.\r\n        console.log('successfuly saved transaction record for ' + username);\r\n        resolve(entity);\r\n      });\r\n    });\r\n};\r\n\r\nasync function relayMessage(username, signature, contractAddress, action, txParams){\r\n\tvar WalletContract = web3interface.getWalletContract(contractAddress);\r\n\t\r\n\tvar receipt, error;\r\n\tvar nextNonce = await WalletContract.methods.sendTransaction(\r\n\t\tnonce, txParams.gasPrice, txParams.gasLimit, txParams.to, \r\n\t\ttxParams.value, txParams.data, signature).send()\r\n\t\t\t.on('transactionHash', function(_txHash) { \r\n\t\t\t\trelayMessageSave(username, signature, contractAddress, action, txParams, _txHash);} )\r\n\t\t\t.on('receipt', function(_receipt){ receipt = _receipt; })\r\n\t\t\t.on('error', function(_err,_receipt) { \r\n\t\t\t\terror = _err;\r\n\t\t\t\tconsole.error(_err); \r\n\t\t\t\treceipt = _receipt; });\r\n\t\r\n    return {\"receipt\" : receipt, \"error\" : error };\r\n}\r\n\r\nexport {\r\n    relayMessage\r\n};\r\n"]}